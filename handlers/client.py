# AIOGRAM
from create_google_bot import bot, dp
from aiogram import Dispatcher, types

# FSM
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

# FILTERS
from aiogram.dispatcher.filters import Text


# KEYBOARD
from keyboard import client_kb as cl_kb

# DATA BASE
from database.sqlite_client import Database_client
from database.sqlite_other import Database_ref
from database.sqlite_payments import Database_pay


# DATETIME
import datetime

# CONFIG
import config as cfg


# GOOGLE SHEET
from google_sheets.insert_data import insert_values
from google_sheets.create_start_sheet import create_start_sheet
from google_sheets.show_score import show_score, return_row, clear_return
from google_sheets import graph as gr

# ASYNCIO
import asyncio


# THREAD
from threading import Thread

# OS
import os


# PERMISSION TO DESCRIBE
from handlers.permission import permission, returns_permission, clear_returns

# RANDOM
from random import randint





# CREATE OBJECT DB
path_db = cfg.PATH_DB
db = Database_client(path_db)
db_ref = Database_ref(path_db)
db_pay = Database_pay(path_db)


# CREDENTIALS
credentials = cfg.PATH_CREDENTIALS


#ANTI FLOOD
async def anti_flood(*args, **kwargs):
    message = args[0]
    await message.answer("–ù–µ —Å–ø–µ—à–∏—Ç–µ!")



# START
@dp.throttled(anti_flood, rate=2)
async def start(message: types.Message):
    # SET DEFAULT USER STATUS
    if await db_pay.exist_status(message.from_user.id) is None:
        await db_pay.default_status(message.from_user.id)

    # REFERRAL SYSTEM
    if len(message.text) > 6:

        referrer_id = str(message.text.split(' ')[1])
        if await db_ref.exist_referrer(str(referrer_id)) is not None:

            referrer_name = await db_ref.username_referrer(str(referrer_id))

            if str(referrer_id) == str(message.from_user.id):
                await message.answer('–ù–µ–ª—å–∑—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ')

            else:
                if await db_ref.exist_referral(str(message.from_user.id)) is not None:
                    await message.answer(f'–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {referrer_name}')

                else:


                    await db_ref.add_referral(referrer_id, message.from_user.id)

                    # EDIT STATUS
                    if await db_ref.count_referral(referrer_id) >= 10:
                        await db_pay.edit_status(referrer_id)


                    await bot.send_message(message.from_user.id, f'–í—ã —Å—Ç–∞–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {referrer_name}!')

                    if message.from_user.username is None:
                        await bot.send_message(referrer_id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} –≤–∞—à –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!')
                    else:
                        await bot.send_message(referrer_id,f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –≤–∞—à –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!')

        else:
            await message.answer('–°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞')




    # WELCOME MESSAGE
    welcome_message = f'<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name}!</b> ‚úã\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å' \
                        ' —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏ —Å –ø–æ–º–æ—â—å—é –≥—Ä–∞—Ñ–∏–∫–æ–≤, –ø–æ–º–µ—Ç–æ–∫' \
                        ' –∏ –ø—Ä–æ—á–∏—Ö –≤–µ—â–µ–π.\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è!'


    await message.answer(welcome_message, parse_mode='HTML', reply_markup=cl_kb.main_kb)


    # REG USER
    exist_in_db = await db.exist_in_db(message.from_user.id)

    if exist_in_db is None:

        cur_date = datetime.datetime.now().strftime('%Y-%m-%d')

        if message.from_user.username is None:
            await db.reg_user(str(message.from_user.id), str(message.from_user.first_name), str(cur_date))
        else:
            await db.reg_user(str(message.from_user.id), str(message.from_user.username), str(cur_date))




# HELP
async def help(message: types.Message):
    help_message = '<b>–î–ª—è —á–µ–≥–æ —ç—Ç–æ—Ç –±–æ—Ç?</b>\n' \
                   '–ë–ª–∞–≥–æ–¥–∞—Ä—è —Ñ—É–Ω–∫—Ü–∏—è–º —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ:\n' \
                   '‚Ä¢ –û—Ü–µ–Ω–∏–≤–∞—Ç—å —Å–≤–æ–π –¥–µ–Ω—å\n' \
                   '‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –≥—Ä–∞—Ñ–∏–∫–æ–≤\n' \
                   '‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–æ–¥–Ω—è—Ç–∏—é –¥—É—Ö–∞\n' \
                   f'\n–ò—Å–∫—Ä–µ–Ω–Ω–µ –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤–∞–º, {message.from_user.first_name}, –ø–æ–º–æ–∂–µ—Ç –æ–¥–∏–Ω –∏–∑ –Ω–∞—à–∏—Ö —Å–æ–≤–µ—Ç–æ–≤!\n' \
                   f'<b>–£–¥–∞—á–∏!</b> ‚ù§' \

    instruction = '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å <a href="https://www.google.ru/intl/ru/sheets/about/">Google —Ç–∞–±–ª–∏—Ü—É</a>\n\n' \
                  '–ò –≤—ã–¥–∞—Ç—å –±–æ—Ç—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:'

    service_gmail = '–ü–æ—á—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: `test-336@nimble-petal-354410.iam.gserviceaccount.com`\n\n' \
                    '–ö–æ–≥–¥–∞ –≤—ã –ø—Ä–æ–¥–µ–ª–∞–µ—Ç–µ –≤—Å–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏, –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–º —Å—Å—ã–ª–∫—É —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã\n' \
                    '`/set_table` —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É'

    img1 = open(os.path.abspath('assets/1.jpg'), 'rb')
    img2 = open(os.path.abspath('assets/2.jpg'), 'rb')
    
    await message.answer(help_message, parse_mode='HTML', disable_web_page_preview=True)
    await message.answer(instruction, parse_mode='HTML', disable_web_page_preview=True)
    await bot.send_photo(message.from_user.id, img1)
    await bot.send_photo(message.from_user.id, img2)
    await message.answer(service_gmail, parse_mode='MARKDOWN')









# YET
async def yet(message: types.Message):
    await message.delete()
    await message.answer(message.text, reply_markup=cl_kb.secondary_kb)


# MENU
async def menu(message: types.Message):
    await message.delete()
    await message.answer(message.text, reply_markup=cl_kb.main_kb)








# SHOW GRAPH
@dp.throttled(anti_flood, rate=2)
async def show_graph(message: types.Message):
    if await db_pay.user_status(message.from_user.id) == 'golden':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞ –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫', reply_markup=cl_kb.count_days_graph)
    else:
        await message.answer('–í—ã –µ—â—ë –Ω–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –¥–æ—Å—Ç—É–ø')



# 10 DAYS GRAPH
@dp.throttled(anti_flood, rate=2)
async def day_10(message: types.Message):
    if await db_pay.user_status(message.from_user.id) == 'golden':
        if await db.exist_spreadsheet(message.from_user.id) is not None:
            await message.answer(message.text, reply_markup=cl_kb.kb_remove)
            await message.delete()
            # START CHECK
            spreadsheetId = await db.get_spreadsheetId(message.from_user.id)
            award = Thread(target=gr.exist_rows, args=(10, spreadsheetId[0], ))     # alive
            award.start()

            await asyncio.sleep(2)

            if await gr.return_answer_exist():
                await gr.remove_list()

                # WAIT...
                collapse_mes = await message.answer('–ë–æ—Ç —Å—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫...')
                collapse_sticker = await bot.send_sticker(message.from_user.id, 'CAACAgIAAxkBAAIHvGLD7IfmXUxoiO9RnLPhOSSZy1f2AAIjAAMoD2oUJ1El54wgpAYpBA')

                # START CREATING
                cr_graph = Thread(target=gr.create_graph_, args=(10, spreadsheetId[0],))   # alive
                cr_graph.start()

                await asyncio.sleep(2)

                # DEL WAIT...
                await bot.delete_message(message.from_user.id, collapse_mes.message_id)
                await bot.delete_message(message.from_user.id, collapse_sticker.message_id)


                #RETURN VALUES
                message_dict = gr.return_message_list()
                img = open(message_dict['path'], 'rb')
                await bot.send_photo(message.from_user.id, img)
                os.remove(message_dict['path'])


                # SEND GRAPH
                mes_text = '<b>–ö—Ä–∞—Ç–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ üìã</b>\n' \
                           f'<b>–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞</b>: {round(message_dict["average"], 2)}\n' \
                           f'<b>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</b>: {message_dict["mood"]}'

                await message.answer(mes_text, parse_mode='HTML', reply_markup=cl_kb.main_kb)

                count_advice = await db.count_advice()
                id_advice = randint(1, count_advice)

                advice_text = '<b>–°–æ–≤–µ—Ç</b>\n' \
                              f'<i>{await db.get_rand_advice(id_advice)}</i>'


                await message.answer(advice_text, parse_mode='HTML')

                gr.clear_message_list()
            else:
                gr.remove_list()
                await message.answer('–í –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ –ø–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –∑–∞–ø–∏—Å–µ–π')
        else:
            await message.answer('–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü—ã, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë <b>/set_table</b>', parse_mode='HTML')
    else:
        await message.answer('–í—ã –µ—â—ë –Ω–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –¥–æ—Å—Ç—É–ø')



# 30 DAYS GRAPH
@dp.throttled(anti_flood, rate=2)
async def day_30(message: types.Message):
    if await db_pay.user_status(message.from_user.id) == 'golden':
        if await db.exist_spreadsheet(message.from_user.id) is not None:
            await message.answer(message.text, reply_markup=cl_kb.kb_remove)
            await message.delete()
            # START CHECK
            spreadsheetId = await db.get_spreadsheetId(message.from_user.id)
            award = Thread(target=gr.exist_rows, args=(30, spreadsheetId[0], ))     # alive
            award.start()

            await asyncio.sleep(2)

            if await gr.return_answer_exist():
                await gr.remove_list()

                # WAIT...
                collapse_mes = await message.answer('–ë–æ—Ç —Å—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫...')
                collapse_sticker = await bot.send_sticker(message.from_user.id, 'CAACAgIAAxkBAAIHvGLD7IfmXUxoiO9RnLPhOSSZy1f2AAIjAAMoD2oUJ1El54wgpAYpBA')

                # START CREATING
                cr_graph = Thread(target=gr.create_graph_, args=(30, spreadsheetId[0],))   # alive
                cr_graph.start()

                await asyncio.sleep(2)

                # DEL WAIT...
                await bot.delete_message(message.from_user.id, collapse_mes.message_id)
                await bot.delete_message(message.from_user.id, collapse_sticker.message_id)


                #RETURN VALUES
                message_dict = gr.return_message_list()
                img = open(message_dict['path'], 'rb')
                await bot.send_photo(message.from_user.id, img)
                os.remove(message_dict['path'])


                # SEND GRAPH
                mes_text = '<b>–ö—Ä–∞—Ç–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ üìã</b>\n' \
                           f'<b>–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞</b>: {round(message_dict["average"], 2)}\n' \
                           f'<b>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</b>: {message_dict["mood"]}'

                await message.answer(mes_text, parse_mode='HTML', reply_markup=cl_kb.main_kb)

                count_advice = await db.count_advice()
                id_advice = randint(1, count_advice)

                advice_text = '<b>–°–æ–≤–µ—Ç</b>\n' \
                              f'<i>{await db.get_rand_advice(id_advice)}</i>'

                await message.answer(advice_text, parse_mode='HTML')

                gr.clear_message_list()
            else:
                await gr.remove_list()
                await message.answer('–í –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ –ø–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –∑–∞–ø–∏—Å–µ–π')
        else:
            await message.answer('–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü—ã, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë <b>/set_table</b>', parse_mode='HTML')
    else:
        await message.answer('–í—ã –µ—â—ë –Ω–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –¥–æ—Å—Ç—É–ø')





# ALL DAYS GRAPH
@dp.throttled(anti_flood, rate=2)
async def all_day(message: types.Message):
    if await db_pay.user_status(message.from_user.id) == 'golden':
        if await db.exist_spreadsheet(message.from_user.id) is not None:
            await message.answer(message.text, reply_markup=cl_kb.kb_remove)
            await message.delete()
            # START CHECK
            spreadsheetId = await db.get_spreadsheetId(message.from_user.id)
            award = Thread(target=gr.exist_rows, args=('all', spreadsheetId[0], ))     # alive
            award.start()

            await asyncio.sleep(2)

            if await gr.return_answer_exist():
                await gr.remove_list()

                # WAIT...
                collapse_mes = await message.answer('–ë–æ—Ç —Å—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫...')
                collapse_sticker = await bot.send_sticker(message.from_user.id, 'CAACAgIAAxkBAAIHvGLD7IfmXUxoiO9RnLPhOSSZy1f2AAIjAAMoD2oUJ1El54wgpAYpBA')

                # START CREATING
                cr_graph = Thread(target=gr.create_graph_, args=('all', spreadsheetId[0],))   # alive
                cr_graph.start()

                await asyncio.sleep(2)

                # DEL WAIT...
                await bot.delete_message(message.from_user.id, collapse_mes.message_id)
                await bot.delete_message(message.from_user.id, collapse_sticker.message_id)


                #RETURN VALUES
                message_dict = gr.return_message_list()
                img = open(message_dict['path'], 'rb')
                await bot.send_photo(message.from_user.id, img)
                os.remove(message_dict['path'])


                # SEND GRAPH
                mes_text = '<b>–ö—Ä–∞—Ç–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ üìã</b>\n' \
                           f'<b>–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞</b>: {round(message_dict["average"], 2)}\n' \
                           f'<b>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</b>: {message_dict["mood"]}'

                await message.answer(mes_text, parse_mode='HTML', reply_markup=cl_kb.main_kb)

                count_advice = await db.count_advice()
                id_advice = randint(1, count_advice)

                advice_text = '<b>–°–æ–≤–µ—Ç</b>\n' \
                              f'<i>{await db.get_rand_advice(id_advice)}</i>'

                await message.answer(advice_text, parse_mode='HTML')


                gr.clear_message_list()
            else:
                await gr.remove_list()
                await message.answer('–í –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ –ø–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –∑–∞–ø–∏—Å–µ–π')
        else:
            await message.answer('–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü—ã, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë <b>/set_table</b>', parse_mode='HTML')
    else:
        await message.answer('–í—ã –µ—â—ë –Ω–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –¥–æ—Å—Ç—É–ø')








# DESCRIPTION DAY
class FSMdescription(StatesGroup):
    score = State()
    description = State()


# START DESCRIBE
@dp.throttled(anti_flood, rate=2)
async def start_description_day(message: types.Message):
    if await db_pay.user_status(message.from_user.id) == 'golden':
        if await db.exist_spreadsheet(message.from_user.id) is not None:
            spreadsheetId = await db.get_spreadsheetId(message.from_user.id)

            #START CHECK
            per = Thread(target=permission, args=(spreadsheetId[0], ))
            per.start()

            # Waiting for the request to returns answer
            await asyncio.sleep(1)

            # Handler errors (wait). If error, then wait and continue
            if returns_permission() == 'Error':

                await asyncio.sleep(1)

                if returns_permission():
                    await clear_returns()
                    await message.answer('–û—Ü–µ–Ω–∏—Ç–µ –¥–µ–Ω—å –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5', reply_markup=cl_kb.score_day)
                    await FSMdescription.score.set()
                else:
                    await clear_returns()
                    await message.answer('–°–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –æ–ø–∏—Å—ã–≤–∞–ª–∏ –¥–µ–Ω—å, –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞')

            # If not error, then not wait
            else:
                if returns_permission():
                    await clear_returns()
                    await message.answer('–û—Ü–µ–Ω–∏—Ç–µ –¥–µ–Ω—å –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5', reply_markup=cl_kb.score_day)
                    await FSMdescription.score.set()
                else:
                    await clear_returns()
                    await message.answer('–°–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –æ–ø–∏—Å—ã–≤–∞–ª–∏ –¥–µ–Ω—å, –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞')


        else:
            await message.answer('–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë `/set_table —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É`', parse_mode='MARKDOWN')

    else:
        await message.answer('–í—ã –µ—â—ë –Ω–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –¥–æ—Å—Ç—É–ø')




# SCORE
async def score_day(message: types.Message, state: FSMContext):

    try:
        int(message.text)
    except ValueError:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5', reply_markup=cl_kb.main_kb)
        await state.finish()
    else:
        if int(message.text) > 5 or int(message.text) < 1:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5', reply_markup=cl_kb.main_kb)
            await state.finish()
        else:

            async with state.proxy() as data:
                data['score'] = message.text
                await message.answer('–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –¥–µ–Ω—å', reply_markup=cl_kb.kb_remove)

            await FSMdescription.next()



# CHECK
async def check_description_day(message: types.Message, state: FSMContext):
    if len(message.text) > 100:
        len_text = f'–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —É–ª–æ–∂–∏—Ç—å—Å—è –≤ 100 —Å–∏–º–≤–æ–ª–æ–º. –°–µ–π—á–∞—Å —É –≤–∞—Å <b>{len(message.text)}</b> —Å–∏–º–≤–æ–ª–æ–≤'
        await message.answer(len_text, parse_mode='HTML', reply_markup=cl_kb.main_kb)
        await state.finish()
    else:
        async with state.proxy() as data:
            data['description'] = message.text
            check_text = f'<b>–í–∞—à —Ç–µ–∫—Å—Ç:</b>\n"{message.text}"\n<b>–û—Ü–µ–Ω–∫–∞ - </b>{data["score"]}'

        await message.answer(check_text, parse_mode='HTML', reply_markup=cl_kb.check_description)
        await FSMdescription.next()


# SAVE DESCRIPTION
async def save_description_day(message: types.Message, state: FSMContext):
    await message.answer('–û—Ü–µ–Ω–∫–∞ –∑–∞—á—Ç–µ–Ω–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É ‚úî', reply_markup=cl_kb.main_kb)
    async with state.proxy() as data:
        data['date'] = datetime.datetime.now().strftime('%d\\%m\\%Y')

        # –ó–∞–Ω–æ—Å–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        values = [[data['date'], data['score'], data['description']]]

        user_spreadsheetId = await db.get_spreadsheetId(message.from_user.id)

        del_mes1 = await message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –±–æ—Ç –≤–Ω–µ—Å—ë—Ç –¥–∞–Ω–Ω—ã–µ...', reply_markup=cl_kb.kb_remove)
        del_mes2 = await bot.send_sticker(message.from_user.id, 'CAACAgIAAxkBAAIHvGLD7IfmXUxoiO9RnLPhOSSZy1f2AAIjAAMoD2oUJ1El54wgpAYpBA')

        loop = asyncio.get_event_loop()
        await loop.run_in_executor(None, run_insert_values, credentials, user_spreadsheetId[0], values)

        await asyncio.sleep(1)

        await message.answer('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω—ã ‚úî', reply_markup=cl_kb.main_kb)
        await bot.delete_message(message.from_user.id, del_mes1.message_id)
        await bot.delete_message(message.from_user.id, del_mes2.message_id)

    await state.finish()

def run_insert_values(credentials, spreadsheetId, values):
    asyncio.run(insert_values(credentials, spreadsheetId, values))


# CANCEL
async def cancel(message: types.Message, state: FSMContext):
    await message.answer('–û—Ç–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚ùå', reply_markup=cl_kb.main_kb)
    await state.finish()


# REFERRAL SYSTEM
async def referral_system(message: types.Message):
    count_referral = await db_ref.count_referral(message.from_user.id)

    if count_referral >= 10:
        msg_text = f'–°—Å—ã–ª–∫–∞: `http://t.me/google_sheets146Bot?start={message.from_user.id}`\n\n' \
                   f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ - {count_referral}\n'
        await message.answer(msg_text, parse_mode='MARKDOWN')

    else:
        msg_text = f'–°—Å—ã–ª–∫–∞: `http://t.me/google_sheets146Bot?start={message.from_user.id}`\n\n' \
                   f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ - {count_referral}\n' \
                   f'–ï—Å–ª–∏ –≤—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 10 –¥—Ä—É–∑–µ–π, —Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ —Å—Ç–∞–Ω—É—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏'

        await message.answer(msg_text, parse_mode='MARKDOWN')





# SET TABLE
@dp.throttled(anti_flood, rate=2)
async def set_table(message: types.Message):
        if await db.exist_spreadsheet(message.from_user.id) is None:

            if len(message.text) == 10:
                await message.answer('–ö–æ–º–∞–Ω–¥–∞ –ø—É—Å—Ç–∞—è, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É (/set_table <b>—Å—Å—ã–ª–∫–∞</b>)', parse_mode='HTML')

            else:
                google_link = message.text.split(' ')[1]

                example_link = 'https://docs.google.com/spreadsheets/d/'

                if google_link[0:39] == example_link:
                    spreadsheetId = google_link.split('/')[5]

                    if await db.exist_spreadsheetId(spreadsheetId) is None:



                        del_mes1 = await message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –±–æ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É...', reply_markup=cl_kb.kb_remove)
                        del_mes2 = await bot.send_sticker(message.from_user.id, 'CAACAgIAAxkBAAIHvGLD7IfmXUxoiO9RnLPhOSSZy1f2AAIjAAMoD2oUJ1El54wgpAYpBA')


                        create_sheet = Thread(target=await create_start_sheet(credentials, spreadsheetId, message))
                        create_sheet.start()

                        await asyncio.sleep(1)

                        await bot.delete_message(message.from_user.id, del_mes1.message_id)
                        await bot.delete_message(message.from_user.id, del_mes2.message_id)

                    else:
                        await message.answer('–≠—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–º —Å—Å—ã–ª–∫—É –Ω–∞ –¥—Ä—É–≥—É—é —Ç–∞–±–ª–∏—Ü—É')

                else:
                    await message.answer('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É')
        else:
            await message.answer('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞', reply_markup=cl_kb.delete_spr)





# DELETE GOOGLE SPREADSHEET
async def delete_spreadsheet(message: types.Message):
    await db.delete_spreadsheet(message.from_user.id)
    await message.answer('–¢–∞–±–ª–∏—Ü–∞ —É–¥–∞–ª–µ–Ω–∞, –≤—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é', reply_markup=cl_kb.main_kb)






# SHOW SCORE
class FSMshow_score(StatesGroup):
    date = State()

@dp.throttled(anti_flood, rate=2)
async def start_show_score(message: types.Message):
    if await db_pay.user_status(message.from_user.id) == 'golden':
        if await db.exist_spreadsheet(message.from_user.id) is not None:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ—Ü–µ–Ω–∫—É:')
            await message.answer('–§–æ—Ä–º–∞—Ç: dd.mm.yy')
            await FSMshow_score.date.set()
        else:
            await message.answer('–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü—ã, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë <b>/set_table</b>', parse_mode='HTML')
    else:
        await message.answer('–í—ã –µ—â—ë –Ω–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –¥–æ—Å—Ç—É–ø')


async def show_score_next(message: types.Message, state: FSMContext):
    date = message.text

    # CHECK FORMAT
    try:
        spl_date = date.split('.')
    except:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã')
        await state.finish()
    else:
        if len(spl_date)==3:
            for i in spl_date:
                try:
                    int(i)
                except ValueError:
                    await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã')
                    await state.finish()

            # FIND
            join_date = '\\'.join(spl_date)
            spreadsheetId = await db.get_spreadsheetId(message.from_user.id)

            # START FIND
            show_score_thread = Thread(target=show_score, args=(join_date, credentials, spreadsheetId[0]))
            show_score_thread.start()


            sticker = await bot.send_sticker(message.from_user.id, 'CAACAgIAAxkBAAIHvGLD7IfmXUxoiO9RnLPhOSSZy1f2AAIjAAMoD2oUJ1El54wgpAYpBA')
            await asyncio.sleep(2)
            await bot.delete_message(message.from_user.id, sticker.message_id)



            # Availability check
            if return_row() == []:
                await message.answer('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            else:
                values = return_row()[0]
                mes_text = f'<b>–î–∞—Ç–∞:</b> {values[0]}\n' \
                           f'<b>–û—Ü–µ–Ω–∫–∞:</b> {values[1]}\n' \
                           f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {values[2]}\n'

                await message.answer(mes_text, parse_mode='HTML')
                clear_return()
            await state.finish()

        else:
            await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã')
            await state.finish()






# REGISTRATION
def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(start, commands=['start'], chat_type='private')
    dp.register_message_handler(help, Text(equals='–ü–æ–º–æ—â—å üîé'), chat_type='private')
    dp.register_message_handler(yet, Text(equals='–ï—â—ë ‚û°'), chat_type='private')
    dp.register_message_handler(menu, Text(equals='–ú–µ–Ω—é üí§'), chat_type='private')
    dp.register_message_handler(referral_system, Text(equals='–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ üë•'), chat_type='private')

    # GRAPH
    dp.register_message_handler(show_graph, Text(equals='–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è üìà'), chat_type='private')
    dp.register_message_handler(day_10, Text(equals='10 üìà'), chat_type='private')
    dp.register_message_handler(day_30, Text(equals='30 üìà'), chat_type='private')
    dp.register_message_handler(all_day, Text(equals='–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è üìà'), chat_type='private')

    # DESCRIPTION DAY
    dp.register_message_handler(start_description_day, Text(equals='–û–ø–∏—Å–∞—Ç—å –¥–µ–Ω—å üìù'), chat_type='private', state=None)
    dp.register_message_handler(cancel, Text(equals='‚ùå'), chat_type='private', state='*')
    dp.register_message_handler(score_day, chat_type='private', state=FSMdescription.score)
    dp.register_message_handler(check_description_day, chat_type='private', state=FSMdescription.description)
    dp.register_message_handler(save_description_day, Text(equals='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å ‚úî'), chat_type='private')
    dp.register_message_handler(start_description_day, Text(equals='–ò–∑–º–µ–Ω–∏—Ç—å ‚úè'), chat_type='private')
    # SHOW SCORE
    dp.register_message_handler(start_show_score, Text(equals='–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ü–µ–Ω–∫—É üî¢'), state = None, chat_type='private')
    dp.register_message_handler(show_score_next, chat_type='private', state = FSMshow_score.date)

    # SET SPREADSHEET
    dp.register_message_handler(set_table, Text(contains='/set_table'), chat_type='private')
    # DELETE SPREADSHEET
    dp.register_message_handler(delete_spreadsheet, Text(equals='–£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É'), chat_type='private')

